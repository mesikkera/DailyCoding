# -*- coding: utf-8 -*-
# 가나다라

'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 

The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

500이상의 숫자 중 첫번 째 삼각수
'''

import time

# def get_divisor_count(triangle_number):
# 	divisor_count = 1
# 	# 약수의 개수는 주어진 수의 제곱근까지만 검사하면 된다.
# 	square_root = triangle_number ** 0.5

# 	for divide_number in xrange(3, square_root, 2):
# 		pass
# 	return divisor_count

# def find_first_triangle_number(number):
# 	natural_number = 1
# 	triangle_number = 2
# 	divisor_count = 0
	
# 	while True:
# 		# get triangle numberw
# 		triangle_number = natural_number * (natural_number+1) / 2
# 		natural_number += 1

# 		# get divisor of triangle_number
# 		divisor_count = get_divisor_count(triangle_number)

# 		if divisor_count > number:
# 			break
# 	return triangle_number

from sympy import divisors

def find_first_triangle_number(number):
	natural_number = 1
	triangle_number = natural_number * (natural_number) / 2
	while True:
	    if len(divisors(natural_number*(natural_number+1)/2)) > 500:
	        print natural_number*(natural_number+1)/2
	        break
	    natural_number += 1

start = time.time()
first_triangle_number = find_first_triangle_number(500)
elapsed = (time.time() - start)

print "first triangle number is %s returned in %f seconds" % (first_triangle_number, elapsed)